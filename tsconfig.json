// 详细的配置，请参考https://www.typescriptlang.org/tsconfig
{
	// compilerOptions  ts编译器的设置选项
	"compilerOptions": {
		"target": "ESNext", // target ts编译后的版本
		"module": "ESNext", // module 指定使用的模块规范
		"lib": ["ESNext", "DOM"], // lib  指定编译中的库
		"strict": true, // strict  是否启动所有类型检查
		"forceConsistentCasingInFileNames": true, // 强制在文件名中使用一致的大小写，默认为 true
		"allowJs": true, // allowJs  是否编译JS，默认为false
		"sourceMap": true, // sourceMap  编译是否生成.map文件
		"declaration": true, // 生成 .d.ts 类型文件，默认为 false
		"declarationDir": "dist/types", // .d.ts 类型文件的输出目录，默认为 outDir 目录
		"baseUrl": ".", // baseUrl  指定解析非相对模块名称的基本目录
		"outDir": "dist", // 编译输出文件夹路径，默认为源文件同级目录
		"esModuleInterop": true, // 通过导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
		"useDefineForClassFields": true, // useDefineForClassFields  将 class 声明中的字段语义从 [[Set]] 变更到 [[Define]]
		"noUnusedLocals": true, // noUnusedLocals  检查是否有定义了但是没有使用变量
		"noUnusedParameters": true, // noUnusedParameters  检查是否在函数中没有使用的参数
		"noImplicitAny": false, // noImplicitAny  默认将没有明确类型的值指定为any类型
		"skipLibCheck": true, // skipLibCheck  跳过类型不一致检查
		"moduleResolution": "Node", // moduleResolution  选择模块解析策略，有"node"和"classic"两种类型
		"jsx": "preserve",
		"resolveJsonModule": true, // resolveJsonModule  可以在ts中引入json模块
		"isolatedModules": true, // isolatedModules  将每个文件作为单独的模块
		"noEmit": true, // noEmit  不生成编译文件
		// paths  设置模块名到基于baseUrl的路径映射
		"paths": {
			"/@/*": ["./src/*"],
			"/#/*": ["./types/*"]
		}
	},
	// include  指定需要编译的ts文件
	"include": [
		"src/**/*.ts",
		"src/**/*.d.ts",
		"src/**/*.tsx",
		"src/**/*.vue",
		"src/plugins/*.ts",
		"vite.config.ts",
		"types/**/*.d.ts",
		"types/**/*.ts"
	],
	// exclude  指定不需要被编译的ts目录文件
	"exclude": ["node_modules", "dist", "**/*.js"]
}
